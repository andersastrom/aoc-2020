class Day18_2:
    input = """4 * (7 + 5 + 7) + 9 + 2 * ((5 * 6) * 9 + 6 + 3) + 3
5 + (4 * (3 + 2 + 5 + 9 * 3))
4 + 5 + 9 * 9 * (7 * (7 + 7 * 3) * (9 + 3) * 5 + (2 * 8 * 3)) * 4
(6 * 6 * 3 * (7 * 3 * 3 * 5) * 5 + 7) * (2 * 3 * 3 + 2) + 2
2 + 6 * 5 * 4 + ((3 * 3 * 6 * 5 + 2) * 2 * 2) + 9
(3 * 4 + 3 * 6 * 7) + ((6 * 8 * 8 * 2 + 9 * 8) + 5 + 5 * 4 * 5 + 9) + (8 + 4) * 5
3 + 7 + 4 + (4 + (9 + 2 + 4 + 7 + 4)) + 6
2 * 2 * (9 * 5 * (9 + 4 * 8 * 4 * 5 * 8) + 9) * 2
5 + (7 + (9 * 3 * 8) * 4 * 2) * (4 + 2 * 8 + 4) * 4 + 9
(9 + 4 * 8 * 7 * 8) * ((3 * 5 * 4 + 2 * 6 + 7) * 7 * 3 + 2 + 3 * 6) + (7 * 7 * 6 * 8 * (9 + 9 * 9 * 9 + 9 + 8) + 3) + 4 * 9 + (6 + 9 * 5)
9 * (9 + 6 * 2) + 8
(7 * 9 * 6 + 9) + 6 * 6 + (8 + 4 * (9 * 9) * 4 * 3) + 6
(4 + 2) * 7
(3 * 7 + 3) + 7 * 5 * (4 + 9 * 8) + 4 + 3
(7 + (9 * 6 + 7 * 8 + 6 * 3) + 8 * 3) + 8
(8 * 2 + 8) + (8 * 5 * 8 * 7 * 8 * (3 * 3 + 9)) + 6 + 9 * (4 * 7 + 3 + 2)
6 + 7 * (3 * 2 + (3 * 8 + 9) * (4 + 2 + 5 + 7) + 8) + 7 + 5 * (6 * (7 + 6 + 5) + 3 + 4 * (8 + 4 + 9 + 3))
3 + 5 + (5 * (9 * 8 * 4) * 7 + 2 * 8) * (4 + 6) + (3 * 7 + 7 * 9 + (6 + 6 * 8 + 7 * 5 * 6)) * 4
5 * (6 * 7 * 3) + 3 + 2 * 7 + ((9 * 6 + 5 + 3 + 8) * 4 * 5 * 7 * 7)
(2 * 4 + 6 + 5) + (6 + 3 + 4 + 6 * 9 + 4) + (6 * 7 * 5)
2 + ((9 + 9 + 5 + 8) + 2 * 6) * 7 * 3 * 4 + 6
6 * 4 + 9 * (5 + 5) + ((8 * 5 * 3 * 4 * 2) * 8) * 7
3 + (9 * 6 + 2 + 5 + 3) * (3 + 7 * 7 * 6 * 5) * (4 + (2 * 6 * 3 + 4 * 3 * 5) + 5 * 8 * 4 + (5 * 2 * 4 + 5 + 7))
(8 * 4 + 7 + 9 + 5 + 2) + 3 * 9 + (3 + 7 + 3 * 6 + 3) + 7 * 9
8 * 7 * (6 * 2) * 2 * 7
(2 + 6 + 3 + 8 * 4) + (3 + 4) + 5 * 9
(2 * 6 + (8 + 8 + 9) + 7 + 7) + 9 * ((7 * 9 * 9) + 5 * 3 * 8 + (5 * 4 + 4 * 7) * 9) + 8 + 8
(4 + (6 + 6 + 4 * 6 + 5 * 8) * 4) * 3 + (7 + 9 * 8 + 6 * (8 * 6 + 3 + 7 * 2 * 8) + 8) * 7 + 7
(6 * 2 + 5) * (2 * (6 + 2 + 2 + 5 * 7 * 9) + 8 * 4) * 7 + 6 + ((4 * 6 + 5 * 4 + 2) * (7 + 9 * 7 + 8) + 4 * (5 * 4 * 9 + 3 + 6 + 7) * 5) + 6
6 * ((3 * 5 * 3 + 4 + 7 + 8) * 7 + 6)
2 + 8 + 8 * 6 + (8 * 2 + 8) + 7
(7 * 6) * 3 + 7 + 2 + 6 + 9
2 * 2 * 3 + (2 * 2 * 4) * 2 + 4
3 * (3 + (4 * 8) + 8 + 2 + 3 + 6)
(3 + 2 + 2) + 3 + (2 * 7 + (8 * 4) * 9 * 2) + 8 + 2
9 * ((8 + 6 * 4) * 7) * 8 + (9 + 6) * 6 * (2 * 7 * 6 + (4 * 5 * 4) + 4)
3 + 2 * 3 * 9
(9 + 9 + 6 * 9 + 7) * (7 * 2 * 8) + ((2 * 3 * 7) * 3 + 9 + 9 * 6) + (8 + 8 + (7 + 9 * 2) * 4)
((8 + 8 * 5) + 6 * 4 + 9 + 4 + 5) + 7 + 7 + 6 + (5 + 8 + 9)
(3 + 9 + 2 + 5 * 7 * 6) * 2
3 + 3 * ((2 * 3) + 3 * 6 * (4 * 3)) + 4 * (3 + 5 * 2 + 9 * 3)
4 * 2 * 7 * ((4 * 5 + 9 + 8 * 6) + 8 + 9) + 7
(5 * 2 + 3 * 9 * 5) + 5 + 8 * (9 + 3) + (4 * 4 * 5)
2 * 4 + 3 + 9 + 7 + (3 * 4 * 3 * 7 + 7 + 5)
((2 * 4) * 3 * 3 * 7) + 7 * 3 + 2
9 * 4 * 4 * (6 + 5) + 9 * 5
7 * 5 * (5 * 2 * 7 * 8 + 5) + (2 * 4 + 7 + 3 * 5) + 7
5 * 2 * (7 + (8 + 9 * 2 + 3) * 3 + 3)
(5 + 6 * 9 * 8 * 8) * (7 + 4 * 4 + (9 + 9 * 7 + 2 * 8) * 4) * (5 * 6 + 9 + 8 * (8 * 2 + 2 * 7)) * 9
8 + 6 + (8 * 6) + 7 * (4 * 6) + 8
9 + (4 * 8 * 4 * 5 + 8) * 3
5 + 5 * 7 + (6 * (8 + 6 * 4) + 4 + 8 + 5) + 3
3 * 7 + (5 + 8 * 2 * 4 + (8 + 5 + 6 * 4 * 9) * 9) * 6 * 3
((6 * 5) + 8 * 4 * 2 + (3 * 5)) + (4 * 5 + 2 * (5 + 9 * 6 + 2) + (8 + 3 * 5 + 4) * 4) * (3 + 6)
8 * 8 + 8 * (6 + 7 * 2 + 2 * 7 * (5 * 9 * 3)) + 4
(5 + 7 + 7) + 6 + 7 * (3 + (9 * 3)) + 7 * ((9 + 3 + 2 + 6 * 4 * 4) + 2 + 2 * 8 + 9 + 5)
5 + 3 * 8 * 6 + (4 * 4 * 7 * 3 + 8 + 9)
(9 * (8 * 6 * 6 + 8) + 5) * 3 + 5 * 5 + 9 + 8
3 + (8 + (7 + 2 + 6 + 5 * 7 + 3) + 6 + (9 * 3) + 5) + ((2 * 6 * 2 + 7 + 6) + 9 + 8) + 5 + 8 + 6
8 * 6 + (2 * 5 + 7) * (3 + 6)
(8 * 4) + 5 + (4 * (8 + 9) * 3 + 8) * 5 * 8
4 * (3 + 9 * (8 * 5 + 8 + 9 * 7 * 5)) + 9
9 * 7 * 8 + (5 + 3) + (4 + 5 + 5 * 5 * 7) * 2
8 * (5 + 8 + 3 + 6 * (4 * 7 * 6 * 3 * 9)) + 4 * 6 * 6 + 6
(9 * (8 + 4 * 2 + 9 + 6 * 5) + 8 + 3 * 7) + 5 * 2 * 6 + 4 * 4
6 + 7 * 4 + (9 + 5 * 9 + 4 + 6) + 3
7 * 2 + (6 * 9) + 5 * 5 + 3
(5 * 2 + (5 + 3 + 4 * 4 * 8 + 5) * 2 * 3 * 7) * 9 * 2
2 + (3 * 2 + 5) + (9 * 9 + 6 * 8)
(4 + 4 + 3 + 5 + 5 * 2) * 2 * 5 + 9 + (7 * 5 + 5 * 5 + 3) + 3
9 * (8 + 4) + 7 + 5 + 7 * 9
4 * (8 + 2 + 7)
9 + 3 * 6 * 4 + (2 * 6 + (7 * 8 * 7 * 8) + 6 * 3)
8 + ((3 * 7 * 7 + 8 * 2) * 5 * 8) * (9 + 3 + 7 + 6)
7 * 2 + 4 * (6 + 4 * 8 * (8 * 9 + 8 * 3 * 6 * 6) * (5 + 7 * 6 * 3 + 6) * 6)
2 * (7 + 2 + (3 * 6 + 5 + 3 + 7) * 8 + (4 * 2 + 9 + 9 + 4 + 2)) * 9
8 + (8 * 6 * 6 + (4 * 4 * 4 + 4) + 7 + 7) * 8 * 5 + 5
(9 + 2) + 6 * (5 * 7 * 6 + 7)
8 * 3 + (6 * 2 * (8 * 2) * 5 + 9 + 9) + 4
4 * 9 + (6 + 2 * 9 * 9 * 5 + 5) * 3 * 7 + 4
(5 + (2 * 2 * 2) * 6 + 3 * (9 * 5 * 5 + 8 + 6 + 9) + 9) + (5 + 8 * 2 * (7 * 4 + 6 * 5) * 3) + 2 * 5
7 + 4 + 6 * 5 + 7 * (5 + 9 * 6)
(2 + 7 * (4 * 8 + 8 + 9 + 6 + 9) * 2) + 8 + 2
(2 * (6 * 8) * 8 * 5 * (9 * 4 + 3 * 7)) + 4 + (8 + 5 * 6 * (5 + 9 * 3 * 7))
4 + (8 * (2 * 6) + 4 * 5 + (7 * 2 * 3 + 9 * 6 * 2) + 5) + 2 + 2 * 7
9 * (7 * 4) + 7 * ((6 * 9 + 9 * 6 * 8) + 2 * 2 * 5)
9 + (3 + 9 * 3 * 9 * 9) + (8 * 2 + 9) * 7
(5 + 6 + 8 * 7 + (4 * 3)) * 6 + 6
4 * 7 * 7 + (4 * 5 * 2)
(3 * 8 * 8 + 6 * 9 + 3) * (5 * 6 * 4)
(4 + 2) * 4 * (4 + 9 + 2 * 9 * 8 + 8) + (8 * (8 * 3 + 8 * 5) + 6 + 4) * 3
(3 + 8 * 5 * 5 + (2 * 4 + 3)) + 2 * 7
5 + 4 * (6 + 6 * 4 * (5 * 8 + 9 + 6 * 8 * 7) + 4 + 5) * 8 + 8 + (8 + (3 * 5 * 4 + 4 + 8 * 3) * 6 + 4 + 2 * 2)
((5 * 6) + 3 + 4 * (6 + 5) + 6 + 6) * 2 + 9 + (4 + 3 + 5 * (6 + 3 * 8))
6 + (4 * 5 * 9 * (4 * 4 * 9 * 7)) + 6 * 2 + (6 + 6 + 2 * 2 + 8 + 3) * 5
8 + (2 + 6) * 7 + (3 + 6) * 6
5 * (7 * 9 * 9 + 7 + 3) + (9 + 4 * 6 * 6 * 9)
6 + 5 + 2 + (2 + 2 * 3 * 5 * 9 + 6)
8 + 9 * (7 + 9 * 6) * (6 + 7 * 6) + 2
5 * 9 + 4 + ((9 + 8 * 4) * 7) + 4
(7 + 6 * (2 + 8 + 6 * 3) + 4) + 5 * 9 + 9 * (2 * 6) * ((4 + 6 + 2) * 6 * (6 * 8 * 8 + 3) + (2 + 3 * 2 * 8 * 8 * 3) * 3)
7 * 5 + 5 * ((4 * 4 + 4 * 3 + 6 * 9) * 9 + 7 + (2 * 4) + (8 * 8 * 6 * 6 * 9 * 4) * 5) * (7 * 2) + 4
2 * 4 + (3 * 8 + 8) + (8 + 9 + (4 * 5) * 8 * 9) + (8 + (8 + 5 * 7 + 8) + (8 + 9 + 4) + 7)
5 + 3 + 4 + 2 * 3
((4 + 2) * 3 + 3 * 2 + 4 * (7 + 3 * 7 + 6 + 8 * 5)) * 3 * 9
8 + (8 * 8 * 6) + 4 * 7
(4 * (8 + 4 + 4 + 9 * 4) + 4 + (6 * 9 * 4 * 6 * 4 + 5)) * 7 + 2 + 3
(2 + 4) + 3 + 8 + (7 * 6 * (9 + 8 + 8 * 9 + 5)) + 7 * 9
8 + 9 * 5 + 9 + 7 * 9
(9 * 7) + 2 + 7 + 9
6 * 5
7 + 2 * (5 * 7 * (4 + 5 * 7 + 2)) * 6 * (6 + 7 * 5 * 5 * 5 + (9 + 4))
5 + 7 * 6 * 8 * (3 * 5 + 9 * 4 * (7 + 4 + 7 * 3)) * 8
(7 + 4 * 8 * 2 * (5 + 2 + 2) + 5) * 7 * 7 * (7 * 9)
2 * ((4 + 2 + 9 * 5 * 4) + 9 * 7 + 2) + 4
(9 + 2 + 2 + 7 * 2) + 5 * 8 * 3
(6 + 9 + 5 + 4 + 8) * 8 * (9 + 8) + 5
((7 + 5 + 8 + 5 * 8 + 9) * 6 * 7 + 8 + (7 * 3)) + (3 + 2 * 7 + (4 * 7 * 4 + 7 + 4 + 5) * 9 * (9 + 2 * 2 * 2)) * 4 * (6 + (7 * 4) * 7) * 4 * 5
(9 + 8) * 2 + 5 * ((6 + 4 * 6 + 6 * 8 * 7) * (5 + 9 + 8 * 6 * 7 * 4) + 6) * 8 * 7
8 + 3 + 2 + ((6 * 7) * 6 + 5 * 4 + 9) * 2
2 + ((3 + 8 + 8) + 8) + 3 + 2
6 + ((7 * 3 + 6 * 7) + 2 * 7 * 4)
7 * 4 + 9 + 6 + (5 + 2 * (8 * 2 * 7 * 2 * 4) + 2 + 7 * 7)
(4 * (9 + 2)) * 5 * 8
2 * ((4 * 5) * (8 * 4 * 8 + 6) * 6) * 6 + 7
4 + 7 * 3 + (8 + 7 * 2 + 8 * (8 * 9 + 5 + 4)) * 3
5 * 6 * 3 + 9 * 2 * 4
7 + (6 * (6 * 8 * 5 * 9) + (3 * 9 + 6 * 6 + 4) * (8 * 8 * 9 + 8) + (4 * 7 + 6)) * 5
9 + (8 * 4 + 5 + 6 + 2 + 4) * (5 + (8 * 8)) + 4 + 6
3 * (3 + 7 * 7) * 8 + (3 * 3 * (2 * 8 + 4 + 3 * 7 * 2)) * 3
2 + (9 * (9 + 5) + 8) + (8 * 9 + 6 * 6) * (3 + 6 * 4 * 5 * 9 + 9) + 2 + (8 + 5 * 5 * 2 * (2 + 3 + 3 * 4) * 5)
7 * 2 * (3 * 2 + 4 * 9 * 3)
(2 + 9 * (4 * 8 * 3 * 6) * 7 + (2 * 7 * 5 * 6 * 8 + 8)) + (5 + 9 + (6 + 8) + 8) * 5 * (2 + 3 + 2 + 6)
2 + (4 * (2 * 6 * 4 * 8) * 5 * 3 * 8 + 7) + (8 + 8 * 3 + 6 + (5 * 7)) * 6 + 2 + 7
(7 * 6 + 4 * 3 + 8 + 5) + ((7 + 3) + 7 + 4 + (4 * 9 * 2 + 6 * 2 + 8) * 5)
4 * 5 + 5 + 8 + (8 + 3 + 6 * 2 * 3 * 8) * 9
6 + 7 + (3 * 8 + 3 + 5 * 5 + (4 * 8 * 6 + 9 * 7 + 8)) + 8
((2 * 3 + 3 * 9 * 8 + 3) * (7 + 2 * 2 * 3 + 3 * 7) + 5 + (8 * 9 + 4 * 9 + 9) * 6) * 9
7 * 4 * 5 * 7 + ((4 + 5 + 3 + 3 * 5 * 7) * (8 + 7 + 9 + 9 + 2 + 4))
(3 * 2 * 8 * 4 * 4) * 4 + (4 + 8 + 7 + 4 + (5 * 9 * 5)) + ((5 + 2 + 6 + 3 * 3 * 9) + 4) * 9 * 3
6 + 8 * 8 + 4
8 * (4 * 4 * 4 + 8 * 3 + 4) * 4
6 * 4 * 8
(2 + 7 + 9 * (5 + 6) * 6) * 8 + 8 + 6 + 7
7 + 8 + 5 + 6 + 6
(2 * 2 * 6) * (7 + 3) * 4 + 4 * 9 * 4
3 + (6 * 6 + 5 + 5 + 7) * 7 * (5 + 3) + 5
(7 * 2 + (5 * 3 + 7 * 4 * 3) * 7 * 2) * 6 * 4 * 3 * 3 + 5
5 * ((9 * 8 + 8 * 7 * 7) + 4 * 3 * 9) + (2 * 9 + 9) * 9 * (5 + 2 + (4 * 8 * 4 + 8 * 5 + 8) * 7) * 4
((8 + 6 + 2 + 4 * 5) + 7 + 8 * 5) * 9 + 4 + 6 + 4 * 6
5 + (6 * 4 * (5 * 4 + 7 + 2) + 4) + (7 + 3 * 9 + 7) + ((8 * 3 + 8) + 5 * 4 * 7 + 7 * (8 + 4))
((7 + 9) + 5 + 8 * 4) + 4 + 3
9 + 6 * (3 * 9 + 2 * 2) * 8 * 6
5 + ((7 + 5 + 3) * (9 + 5 * 6 * 7 + 4 + 2) + 9 * 2 * 7 + (4 + 7 + 7 + 8 + 5 + 9)) + 5 * 9
6 + (4 * 8 * (6 * 9)) + 9
9 + 6 + ((9 + 6 + 3 * 3 * 4 * 2) + 9 + 7 + 8 + 5) + ((3 + 7 * 7) * 9 * 9 + 9) + (4 + 6) * 3
9 + (2 * 3 + (5 * 5 * 8 * 4 * 9 * 2) * 9 + (3 + 2 * 7 + 9) * 2) * 2
3 + (2 + 3 * 4 + 4) * (5 + 6 + 9 * 3) + 3
(8 * 4 + 5) + 4
5 + ((3 + 3 * 7 * 3) + 7 * 2) + 4 + ((9 + 6 + 9 + 7 * 7 * 9) + 5 * 4 + 7 * (7 * 3) + (5 * 9 + 8 * 3 * 2))
4 + (3 * 8 * 7 * 5 + 2 + 8)
2 * 8 + (5 * 9 * 9 * (9 * 9 + 6) * 9)
(5 * 3 * (3 + 7 + 2 + 3 + 8)) + 9
2 + 3 + 8 + (3 + 5 * 4 * 6 + 4)
5 + 5 + (9 * (6 * 3 + 3 * 3 + 6 * 8))
2 + 2 + 7 + (6 * 8 * (4 * 4 + 2) + 4)
3 * 8 * (4 * 2) + (5 * (4 * 7 * 2 + 6))
((2 * 3 + 7 + 5) * 8 + 8 * 2 + 5 * 9) + 4 + 8 + 4 * 6
7 * 3 + 6 + (8 + 8 * 6 + 9) * 9
3 + 7 + 8 * 7
2 * 6 + ((3 * 4) + 9 + 6) + 2
(4 * 7 + 4) * (2 * (9 * 2 + 7 * 2) + 8 * 7) + 7 * 6 * 4
2 * 8 + (9 + (4 * 6 + 4 + 8 * 7 * 5) * 2 * 4 + 5) * 9
8 + 6 + 3 * ((4 + 9) * 3 + 3 * 2 * 2) * 7 + 7
5 * 4 * ((7 + 2 + 6) * 5 + 6 + 2 + 9) * 5 + 7 * 3
7 * (9 * 9 * (3 + 3)) * 8 * 7
7 * ((9 + 8 * 4 + 4) + 3 * (9 * 5 * 4)) * 6
(4 + 6) * (4 + 7 * 2) * 5 * 2 + 8
6 + 8 * (3 + 8 * 3 + 4 + 9 + 8) + 3 + 2
5 + 2 * 5 * 7 * ((9 + 5) + 8 + 2)
4 * (3 + 4) * (8 * 3) * 5 + 7 * ((5 * 5 * 4 + 5 + 2) + 4)
(9 * (9 + 2) + 7 * 4 + (7 * 8 * 3) + (7 * 7 * 3)) + (2 + 5 * (9 * 9 + 6 + 3) + 6) + 2 * 4 + ((4 + 5 + 8 * 6 * 3) + (5 * 5 + 2 * 2 * 2) + 2 + 4 * 3 * 8) * 7
6 + 2 + 6 + ((3 * 9 + 7 + 7) + 3 + 6 + (6 + 2 * 6 + 3) + 8) * 5
(5 * (6 * 2 * 5 * 2 + 6 + 6)) * 3 * 8
5 * (4 + 8 + 2 + (5 * 6 * 9) + (8 * 3)) * (8 * (6 + 3 + 6 * 2) + 9 + 8) + 2 + 6 + 3
2 + 3 + 6 + (3 * (2 + 2 * 8) * 7 + 4 * 8 * 7)
(4 * 8 + 8 + 8) * 5
8 * 4 * (5 + 8 * 8 * 2) + 4 * 8 * 5
4 * (7 * (5 + 5 + 5 * 6 * 7) * 2) * ((8 * 9 * 6 * 2) + 7 + 9) * (3 * 6 + 5 * (8 + 9))
5 + 2 * 4 * 8 * 4 * 4
(6 + 5 * (2 + 7 * 5 * 5 + 4)) * 5 + ((6 + 2) + 7 * 6 * 3 * 8 + 5) + 6 * 2
(3 + 4 * 5 * 6) + 6 + (5 + (5 + 9 + 5 * 3 + 4) * 2 + (5 + 2 * 4 * 3 + 3 * 4) * 8) + 4 + (6 + 8)
9 * 3 + 4 * 3 + (9 + 7)
(7 * 4) + (4 * 8 * 2) * (6 + 5 * 7 * 7 * 2) * ((3 * 4 * 9 + 2) + 7 + 3 * 5 + 6 * 5) * 2
3 + 3 * (9 * 2 + 4 + 6)
(8 + 9 * 6 * 5) * (3 + 4 * (7 + 5 + 3) + 4) * 3 + 5
2 + 8 * 6 + 8 + (9 * 4 * 2 * 7) + 9
3 + 4 * (3 * 5 * (4 * 7 * 9 + 8 * 2) * 9 + (6 * 3 + 4 + 6 * 5) * (2 + 8 + 2 + 2)) + (6 * 2 * 5 * 5 + 3 + 4) + 6 * 8
3 + 5 + 3 + 5 + 7
(8 * 4 * 6 + 3 * 6) + 6
3 + (4 + 7 + 5 + 3)
(2 * 9 + 9 + 7 * 9) * (4 + 3 + 3 * 4) * 2 + (3 * 5 * 9 + 4 * 6) + 2
(4 + 2) * 6 * ((2 * 6 + 2 * 3 * 5) * 6) + 9 * 2
5 * 3 + (4 + 5 * (7 * 2 + 9 + 3 + 3)) * 5 + 2
2 * 3 * 4 + 9 + (4 * 6) * 6
7 + 2 * 9 * ((2 + 5 * 9 * 2) + 9 + 4 + 3) * 9
7 * (6 * (8 * 7) * 5 * 6 + (4 * 3 + 9 * 6 + 8 + 6) + 8) * 2
3 + (8 * (2 + 2) * 3 + 6)
3 + (8 * 6) * ((4 * 3 * 7 + 5 * 9) + 8 * 5) * (6 * 5)
6 + 2 + (4 + 6 + 3 * 7 * 8) + 5 + 4
(9 * 3 * 5) * 9 + 7
(9 * 6) * 3 + ((2 + 9) * (7 + 3 + 9 + 7)) * 6 * 6
3 * 4 + 2
5 * 2 * (7 + (6 + 3 * 4) * (3 * 4 + 4 * 3 + 5) + 3) + 6
(4 + 8 + 4 + (6 * 5 + 4 + 5) * 7) + 3 * 4 * 7
8 + (6 + 4) + 4
(4 + 2 + (4 * 4 * 8) * 5) + 7 * (7 * (3 + 6 * 3 * 9 + 9 * 5) + (9 + 8 + 6 * 5 + 3)) * 9 * 9 * 2
8 + ((4 * 9 + 7 * 2) + 6 + (4 * 9 * 5 + 3 * 9 * 5) + 2 * 7 + 6) * (5 * 9) + 4
6 * (9 * 3 * 6 + 4 + (2 * 2 + 6 * 5 + 3)) + 5
(8 + 8 + 4 * 4 * 8 + 6) + 7 * 7 + (7 * 3 * 8 * 2)
5 + (4 * 4 * 7 + 5) + (3 * 7) * 4 + 3
3 + (5 + 7 + 5 * (5 + 9 + 5 * 6 * 8) * 9 + 9) + 3
(3 + 5 + 6 * 2 * 8 + (9 * 2 + 8 * 5 + 3 * 6)) * 6 + 5
3 * (7 * 4 + 7 + (4 + 2 + 8) + (4 + 4 + 5 * 2) + 5) * 6
4 + ((7 + 3 + 7 + 3) + (8 * 2 + 3 + 3)) * (8 + 2) + 3 + 9
9 + 7 * (5 + 2 + (3 + 7 * 2 * 6 + 7 * 6) + (3 * 8 * 6 * 9) + 7 + (7 + 7 + 7)) * (7 * 2) * 4 * (8 + 5 * (5 * 7 + 7 * 3 * 6 + 4) * (8 + 2 * 6 + 3 * 2 + 8))
5 + 2 * (5 + 9 + 5) + 5 * 8
9 * 4 * (4 + (8 * 7 * 8 * 5 + 2 + 7) + 7 * 8) + 2
5 * (7 + 6 * 2 * 9 * (2 * 2 * 8 + 7)) * 3 * 3
6 + 6 * 9 + (2 + (4 * 3 * 8 * 3 * 9) + 5)
9 + 3 * 2 * 3 + (9 * 4 * (4 * 9 * 3) * 8 + 7)
(8 + (3 * 5 * 9 * 7 * 8) + 7 + 3) + 5
(6 * 6 * 5 * 6 * 3) + 5 * 8 * 6 * 8 + 6
2 * (4 + (8 * 7) * 7) + 7 + 8
2 + (2 + 5 + (3 + 8 + 4)) + 2
(5 * 6) * 9 + 4 + 3 + (9 * 3 * 7 * 8) + (2 + 9)
8 + ((8 * 2 + 9 * 3 * 7 + 2) * 4 + (2 * 6 + 6 + 4)) + 4 + 5 + 8 + 3
7 * 2 * 8 * 9 * ((2 + 7 * 2 * 4) * 6 + 4 + 9 + 2) + 5
7 * (5 + 3 + 2 + 6) + 4 * 3
9 + ((7 * 6 + 4 * 7 + 6 + 9) * 5 + 4 * 8) + 2 * (6 * 8 + 6 + 4 + 8 + 3) * 7
8 * (8 * (8 * 5 * 8)) + 6
2 + 2 * 9 + 6 * 4 * 6
4 * (5 + 9 * (8 * 4 + 9 + 9 + 7 * 2) * 4 * 2 * (5 * 9)) * 9 + 5 * 9 + 5
8 * (2 + 9) + 7 + 8 * (7 * 3 * 3) + 3
8 * 3 * 5 * 8 + 5
9 + 3 * (4 * 6 * 7 * 4 + 6 + (2 * 3 * 9 * 9 + 7)) * (7 + 3 + 9) + 9 * 4
(3 * 5 + (9 * 4 + 8 + 7) + 9 + 2) + 4
(6 * 3 * 6 + 6) * ((5 + 3 * 2 * 7 * 6 * 5) + (5 * 2 + 7 + 2) * 3 + 6) * 6
((3 + 9 * 2) * 2) * 2 + (3 + 6) + 9
4 + 2 * 8 + 8 + (8 * 3) + ((3 + 9 * 3 + 2 * 5 * 2) * 3 + (9 * 5 + 9) * (6 * 3 + 4 * 7 + 3) * 3 * 5)
5 + (4 * 7 * 4 * (2 + 2)) + 9 + 2 * 2
5 + 4
((9 + 3 + 3) + 6 + 2 * 4) * (3 + 6)
(7 * 6 * 5 + 7) * 3 + (6 + 4) + 2
7 * 7 * (9 * 4 * 8 + 4 * (2 + 8) * 4) + 6 * 8 * (6 * 7 + 8 + 6 * 7 + 8)
(8 + 4 + 9) + 7 * (5 + 9 * 7) * 4
2 + 6 * (3 + 8) * 3
3 + ((8 * 6 + 2 * 4 + 9 + 4) * 8 * (3 + 3 + 2 * 7 * 8)) + (3 * 6 * 6 + 2) + 5
(2 + 9 * 3) * 2 * 6 * 7
5 + 8 * (7 + 4 * (9 + 3 + 7 * 5 * 9 * 5) + 8 + (2 + 2)) * 3 + ((6 + 2 + 9 + 8 * 2 * 3) * 7 + (6 + 2 * 3 + 6 + 5) + 9 + 7 * 5) + 3
((8 * 2 + 2) * 6 + 2 * (2 + 7)) + (7 + 2 + (2 * 8 + 8 + 9) + 8) * 5 * 7 * 5
6 + 7 * 8 + 3 * (2 * 8 * 9)
8 * 8 + (3 + 8 + 3 + 6 * 9 + (8 * 7 * 4)) * 2 + 6 + (8 * 7 * (8 + 5 * 5) + 7 * (3 * 8 * 4 * 9 + 7) + 3)
4 * (3 * 8 + 9 * 4 + 5) + 2 * 8
(7 * 5 + (3 + 6) * (3 * 3 * 2 + 2) + 7 + 3) * 7
7 + 2 * ((9 * 4 * 3) + (9 * 5 + 6 * 2) + (3 + 9 + 4) + (2 * 8) + 8 * (4 * 4 * 2 * 4 + 7)) + 7
4 + 4 + (5 * (7 * 8 + 2) + 3 + 6) * 6 * 5
((9 * 4 * 2 * 7) + (9 + 5 * 6) * 7 * 8) * 2 * 2 * (7 + (4 + 6 * 7)) + 5 * 7
7 + 5 * 3
(6 + 8 + 9 * (6 * 3 + 3 + 8 * 6 + 8) + (7 + 7)) + 4 * 6
6 + 8 + 5 * ((2 * 4 + 2 + 2 + 3 + 8) + (9 + 7 + 6 + 8 + 6))
5 + 3 + 9 * 2 * 2 + (8 + 4 * (5 + 6 * 9 * 4) * 2)
(9 * 7 * 3 * 6 * 7 * (7 + 2 * 4 * 6 * 4 + 8)) * (9 + 6 + 4 + (4 + 2 + 4 * 3) + 9 + 9) + 3 + 7
7 * 3 * 9 + (7 + 4 + (9 * 3 * 6 + 3 * 5) + (9 * 8) * 3 * (3 * 6 + 8))
(2 * (4 * 3 * 3 + 3 * 2) + 4) + 2
(6 * (2 + 5) * 4) * 8 + 3 + 5 * 2 + 3
(9 + 7 * 9 * 2 + 2 * 9) + 3 * 5 * 6
7 * 8 + (7 * 3 + (8 * 5 * 6))
4 * (6 + 5 * 8 + 4 * 4 + 5) * 5 * 6
4 + (4 * 4 + (9 * 4 * 7) * (7 + 8 + 9 + 8 + 4 * 7) * 9 * 2) + 4 + 7 * (9 * 8 * 4 + 2 * 9 + 3) * (9 + 5 * 3)
4 + 7 * (3 + 5 * 3 * 7) + 7
5 + 4 + (6 + 5 + (7 + 3 + 5) + 7 * 5) * 3 + 7
2 * ((9 * 7 * 2 * 7) + (5 + 2 + 3 * 2)) * (7 + 8) * 8 * (9 * 2)
2 * 5 * (5 * 3 * 2 * 7 + 4) + 3
4 + 5 * 3 * (4 + 9 + 3 + 8 + 2 * 3) + 6
4 * 4 + ((2 + 8 * 2 * 6 + 2 * 2) + 7)
3 + (2 + (7 * 9 + 3 + 6 * 8 + 9) + 5 * 4 + 7 * 7)
((4 * 8 + 3 * 8) * 9) * ((4 + 4 * 6 + 5 * 8 + 6) * (7 + 7) * 8) + 6 * 4 + 4 * 3
(3 * 9 * 8 + (5 + 9 * 8 * 2 * 5 * 7) + (4 * 3 + 2 + 9 + 2 * 8) * 6) * 5 * (7 + 2 + 2 * 2 + 5) + 8 * 5
(3 * 3) * (2 + 6 * 7 * 9)
(7 * 8 * 9 + (7 + 8) * 5) + 7 + 9 * 3 * 4 + 2
(3 * 3 + 7 * 7) * 6 + 2
(4 + 2 + (6 + 6 * 6 + 9) + 8) + 7
8 * 8 + 7 * (2 * (7 + 3) + 2 + (8 * 8 + 5 * 4 + 9) + 6 * 8) + (7 * 8 * 8)
9 * 2
9 * 5 * 5 * 8
6 * 3 * 4 + ((6 * 6 * 4 * 2 * 2 * 5) + 2 * 6 + 5) + 3 * 2
3 * 5 + 5 + (3 * (3 + 4 * 5 * 5 + 3 * 7))
(3 + 9) + 2 * 8
5 * (5 + (8 * 8 + 8 * 5 + 2)) * 6 * (3 * 6 * 2 * 6) * 2 + 9
(9 + 5 * 9 + 3 + 3) * 9 + 3 + (2 * 8 * (4 + 4 * 4 * 6 * 6) + 4)
8 + (2 + 9 + (4 + 5 + 7) * 2) + 3
7 + 9 + 9 + 3 * 7
2 + (7 * 6 * 2 + 7 + 8 * 2) + 3 * 4 + 9 * 2
(3 * (8 * 9 * 2 + 9 + 6) * 5) * 9 + 6 * 6 + 8
3 * 6 + (5 + 4 * 6 * 6 + (7 + 7)) * 4
4 + (8 + 9 + 9 + 3 + 6 + (5 + 5)) * 6 + 6 + 3
(7 * 5 * 7 + 2 + 2) * 5 + (3 * 8 * 7 * 8 * (3 * 6 + 9 + 8) * 4) + 8 + (7 + (7 * 7 + 5 + 6 + 7) + 2 + (8 + 3) * 7) + 9
(8 * 3) + 8 + 9 * 3 + 5
(6 + 8 * 4 + 2) * 2 * (7 * (6 + 2 * 2 + 2 * 4 + 8) * 6 * 8 * 7) + 6 + 4 * 9
8 * ((6 + 6 * 7 + 9) + 3) + 6 + 4 + 2
7 + 7 + 7 * 6 * 2 + (5 + (4 * 6 + 3 * 5 + 8 + 4))
5 + (5 + (5 + 7 * 7) + (8 + 6 + 2 + 4 * 9 * 6) + (9 + 5 + 2)) * 7 * 3
3 + 4 + (3 * 6 + 6 + 4) + 9 * ((9 * 2 * 8) * 2) * 6
8 * 7 * (8 * 8 * 5)
(4 * (3 + 2) * 8 * 4 * 9) * 7 + 7 + 6 + 2
7 + 9 * (9 * 8 * 9) + 8 + (3 + 2 + 7 + 2 * 4 + 8)
(3 + 9 + 4 + 2 + 8 + 4) + (7 + 5 + (2 * 6 + 4 * 5 + 4)) * 9 * 3 + 4 + 8
7 * 3 * 8
((2 * 3) + 4 + 4 * (7 * 8) + (3 + 8)) + 2 * 4 + 5 + 5 + 7
2 + (9 * 3 * (3 * 4 * 6 * 8 + 7 * 9) * 2 * 2) + (8 * (4 * 9 * 9) + (5 * 8) + 9 * 9 + 5)
6 + 8 + (3 * 3 + (4 * 6 + 8 * 8))
7 * 3 + 7
3 + 5 * 5 + 6 * 4 * (2 * (3 * 2 + 6 + 2) + (6 * 2 * 3 + 6 + 8 * 6))
3 * 5 * 7 + ((4 * 8 + 2 * 6 * 8) * 5) * (6 * 6 + 3 + 5 + 8 + 7) + 3
(4 + 2) * 9 + 5 * (8 + 5 + 8 + 5 * (9 + 3 * 8 * 9)) * 7 * (3 + 5 + (4 + 2 * 8 + 3 + 5 * 8) * 2 * (4 * 4 + 9 * 6 + 9) * 5)
((4 * 7 * 4 * 5) + 3 + (9 + 8 + 7 * 2 * 2 + 6) * 6) * 5
4 * (5 * 2 * 8 * 4 + 2) * 2 + (5 + 6 + (3 + 2 * 8 * 5 * 2))
9 * ((2 + 6 + 6 * 6 * 7 + 2) * 5) * 2 * 3 + 7
((4 + 3 + 6 * 4) * 5 + 3 + 3 + 8 * (8 + 2 * 6 * 6)) + (5 + (8 + 7) * 2 * 2 + (9 * 3 + 9 + 3 * 3) * 5) + 2 + 6 * ((4 * 3) + 5 * 3 * 2 + (4 + 2 * 6 + 8 + 5)) + 7
(4 * 8) * 7 * 3 * 2 + (3 * 4 * 7 + 4)
(8 + 7) * 9 + 7 + 9 + (6 + 3)
7 * 4 + (7 * (5 * 6 + 7 * 9 + 3 + 4)) * 8
2 * (4 * (7 * 3 * 7 * 9) + 9 + 8 + 9 * 6) * 3 + 9 * 6
2 + (9 + 3 + 2 + 7 + (7 * 7 * 4 + 2) + 8) * 5 + 3 * 4 * 4
6 + 5 * 7 + 5 + (4 * 8 + 6) * (4 + 3 * 3)
8 + (7 + 4 * 7 * 3) * 2 * 7 * 3
2 * (9 + 3 + 2 * 6) + 6 + 6 * (4 * 6 + 7 + 9 * 9 + (2 * 6 + 5 * 3 + 4))
3 + 8 + (5 + 6 * 4 + (6 * 9) + 2)
(4 + 5 * 4 * 9) * 7 * (9 + 3) * 7 * 4 + 7
(6 * 6 + 8 + 5 * 3) * (3 + 3 + 5 + 8 * 2 * 6)
(5 + (8 * 5 + 6) * (6 + 4 * 4 * 7) + 4) + (7 * 3 + 8) * 4 * (3 + 6 * (9 * 3)) + 6 * 9
6 + (6 * 7 * 2 * (2 + 9 + 2)) + 3 + (6 * 4 + 6 * 8 * 4) + 3 * 2
((8 * 3) + 2 + 4 * 7 + 7 + 6) + 4 + (8 * 4 * 5 + (9 * 2) * (7 + 6)) * 7
(3 * 8 + (9 + 4 + 2 + 7)) + 7
4 * 4 * (7 + 2 + 3 * 4 + 2 + (7 + 5 * 6 + 7 * 6 * 4)) * 2 * 4
7 + (2 + 7 + 5 + 8 * 8 * 8) + 5 + 9 + 2
(8 + 9 * 9) + (5 + (9 + 4 + 2) * 8) * 7 * 4 * 4 * 3
(3 * 3 * (9 + 7 + 4 + 8 * 8) + 2 + 6) + 2 * 4
7 * ((6 + 3 + 2 * 9 + 7) + 5 + 6 + 3 * 4 + 2)
7 + (7 + 9 + 6 + 8) * 3 * (2 * 5 + 2 + 3 * 8) * (8 + 4 + (8 + 5) * 4) + 6
6 + (9 + 7 + (9 * 3 * 3 + 7 + 7)) * (2 * 3 * 2 * 2 * 2) * ((7 * 5 * 7 * 2 * 6 * 7) * 5 * 6 + (4 * 7)) * 9 + 8
(3 * 4 + 7 + 7) + 6 + 9 * 2 + ((2 * 3) * 2 + 7 + (6 * 9 + 5 + 2) + 6) + 2
8 + 5 * 5 * 2 + 9 * 2
(6 * (7 + 7 * 9 * 9 * 3) + 3) * 5 * (6 + 7 * 7 * (2 + 9 + 2)) + 5 + 4 * 5
4 * 4 + 7 + (7 * 3) + 2
4 + 6 + 2 + (7 * 5 * 5 * (3 * 5 * 3 * 6 * 9 * 2) * 4 * (6 + 7 * 6 + 7)) * 6 * 9
9 * 6
((5 + 9 * 6 + 9 * 2) + (2 * 5 + 3 * 6 + 3) + (7 * 7)) + (9 * 8 * 6) * 3 + 2 + (6 + (6 + 6 * 4) + 7) * 5
(3 + 9 + 7 + 6) + 3 * 9 * 9 + 9
5 * 8 * 2 + 9
9 * (4 * (7 * 5 * 4) + 6 * 8 + 5) * (7 + (3 + 9) + (5 + 2 * 7 * 4 * 9 + 7) * 4 + 8 + 2) * 3
4 + (3 * 8 * 4 + (5 + 8) * 7)
9 * 3 + (5 + 7 + 8) + 2 + (7 + 4 * 6) * (8 + (4 * 2 + 8) * 9 * 8)
5 * (4 * 3 * 4 * 2) + 8
3 * ((8 + 4) * (2 * 5 + 2) + 4 * 6 * 6 + (6 * 5 * 9 + 3)) + 9 * 2 * 3
3 * 8 + (8 * 6 + 6 * 9 * 8 * 7)
5 * (5 * 7) * 5 * 8 + 2
((5 * 4 * 5 + 2 * 3) * (3 * 5 * 5 + 2 + 7 * 6)) + 8 + 7 + 4 * 9 + 5
8 + (5 * 6 + 5 * 6 + 2) + 9 * 4 + 8 * 3
8 * 9 + (6 + 3 * 3 + 9 + 4) * 2 + ((5 * 3 + 5 + 7 * 6) + 7) * 4
7 * 4 * (2 + 9)
7 + 7"""

    def __init__(self):
        inp = self.input.replace(' ', '').split('\n')
        
        sum = 0
        for i, series in enumerate(inp):
            if '*' in series:
                while '(' in series or ')' in series:
                    series = self.sum_additions(series)
                    series = self.sum_sub_parentheses(series)
                    if '+' not in series:
                        break

            s = eval(series)
            sum += s
        print(sum)

    def sum_additions(self, series):
        new = series
        for i, c in enumerate(series):
            if c == '+':
                a = series[i-1]
                b = series[i+1]
                if a.isdigit() and b.isdigit():
                    left_i = i - 2
                    prev = series[left_i]
                    while prev.isdigit() and left_i >= 0:
                        a = prev + a
                        left_i -= 1
                        prev = series[left_i]

                    right_i = i + 2
                    is_dig = self.is_dig(series, right_i)
                    while is_dig:
                        b = b + series[right_i]
                        right_i += 1
                        is_dig = self.is_dig(series, right_i)

                    sum = str(int(a) + int(b))
                    new = new.replace((a + c + b), sum)
                    new = new.replace('(' + sum + ')', sum)
                    return self.sum_additions(new)
        return new

    def sum_sub_parentheses(self, series):
        new = series
        for i, c in enumerate(series):
            if c == '+':
                if new[i-1] == ')':
                    left_parens = 0
                    right_parens = 1
                    start = i
                    for left_i, t in enumerate(new[:i-1][::-1]):
                        if t == ')':
                            right_parens = 1
                            left_parens = 0
                            start = i - left_i - 1
                        elif t == '(':
                            left_parens += 1
                        if left_parens == right_parens:
                            left_expr = new[i - left_i - 1:start - 1]
                            if '+' in left_expr:
                                return new
                            break
                    sum = str(eval(left_expr))
                    new = new[:i - left_i - 2] + sum + new[start:]
                    return self.sum_sub_parentheses(new)

                elif new[i+1] == '(':
                    left_parens = 1
                    right_parens = 0
                    start = i
                    for right_i, t in enumerate(series[i+2:]):
                        if t == ')':
                            right_parens += 1
                        elif t == '(':
                            left_parens = 1
                            right_parens = 0
                            start = i + right_i + 1
                        if left_parens == right_parens:
                            right_expr = new[start + 2:i + right_i + 2]
                            if '+' in right_expr:
                                return new
                            break
                    sum = str(eval(right_expr))
                    new = new[:start + 1] + sum + new[i + right_i + 3:]
                    return self.sum_sub_parentheses(new)
        return new

    def is_dig(self, s, i):
        try:
            return s[i].isdigit()
        except Exception:
            return False


Day18_2()
